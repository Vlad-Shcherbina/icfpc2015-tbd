#!/usr/bin/env python3

import argparse
import contextlib
import functools
import json
import itertools
import logging
import multiprocessing
import os
import psutil
import resource
import sys
import time
import traceback

from production import interfaces
from production import utils
from production import solver

NO_LIMIT = -1

parser = argparse.ArgumentParser()
# The parameter -f may be provided multiple times, which means that the program
# should produce results for all of the given inputs.
parser.add_argument('-f', action='append', default=[],
                    help='File containing JSON encoded input')
# If provided, the parameter -t indicates the execution time to produce the
# output for all problems. If it has not finished, the program will be killed
# after that many seconds. If -t is not provided, no time limit is imposed on
# the program.
parser.add_argument('-t', type=int, default=NO_LIMIT,
                    help='Time limit, in seconds, to produce output')
# If provided, the parameter -m indicates the maximum amount of memory that the
# program is allowed to use at any time. Programs that try to allocate more
# than this amount of memory will be killed. If -m is not provided, no memory
# limit (other than the hard memory limit of the system the judges choose to
# run it on) is imposed on the program.
parser.add_argument('-m', type=int, default=NO_LIMIT,
                    help='Memory limit, in megabytes, to produce output')
# If provided, the parameter -m indicates the maximum amount of memory that the
# program is allowed to use at any time. Programs that try to allocate more
# than this amount of memory will be killed. If -m is not provided, no memory
# limit (other than the hard memory limit of the system the judges choose to
# run it on) is imposed on the program.
parser.add_argument('-c', type=int, default=NO_LIMIT,
                    help='How many processor cores are available')
# Phrase of power, as quoted string - including the quotation marks. The
# parameter -p may be provided multiple times, once for each phrase of power
# the program should attempt to invoke in its output. As you discover more
# phrases of power, you can re-run the program with additional -p command line
# options; during judging (except for the lightning division), the program will
# be passed all the phrases of power.
parser.add_argument('-p', action='append', default=[],
                    help='Phrase of power, as quoted string')


# The output of the program should be a JSON list, containing one entry per
# problem and seed, using the following schema:
#
# [ { "problemId": number   /* The `id` of the game configuration */
#  , "seed":      number   /* The seed for the particular game */
#  , "tag":       string   /* A tag for this solution. */
#  , "solution":  Commands
#  }
# ]
#
# The tag field is meant to allow teams to associate scores on the leaderboards
# with specific submitted solutions. If no tag field is supplied, a tag will be
# generated from the submission time.


def natural_size(size):
    try:
        import humanize
        return humanize.naturalsize(size)
    except ImportError:
        return '%.2fMb' % (size / float(2 ** 20))


def load_problems(path):
    problem_instances = []
    with open(path) as problem:
        problem = json.load(problem)
        for seed in problem['sourceSeeds']:
            problem_instances.append(solver.ProblemInstance(problem, seed))
        logging.debug('Loaded %s (%d seeds)', path, len(problem['sourceSeeds']))
    return problem_instances


def prettify_limit(limit, fmt):
    return fmt % limit if limit != NO_LIMIT else 'no limit'


def safe_solve(power_phrases, problem_instance):
    t0 = time.time()
    problem_id = problem_instance.json_data['id']
    seed = problem_instance.seed
    logging.info('Solving problem %d with seed %d', problem_id, seed)

    # Just to be on the safe side catch all possible exception and return an
    # empty solution.
    try:
        # This is to prevent print()s in the code to pollute stdout and corrupt the
        # solution.
        with contextlib.redirect_stdout(sys.stderr):
            with interfaces.with_custom_power_phrases(power_phrases):
                solution = solver.solve(
                    problem_instance, tag_prefix='play_icfp2015 ')

        mem_info = psutil.Process(os.getpid()).get_memory_info()[0]
        logging.info(
            'Problem %d with seed %d solved (total score: %d runtime: '
            '%.3fs memory: %s)',
            problem_id, seed, utils.score_of_solution(solution),
            time.time() - t0, natural_size(mem_info))
        return solution
    except Exception as e:
        logging.error(
            'Something went wrong when solving problem %d with seed %d. '
            'Returning an empty solution (%s)', problem_id, seed, e)
        return utils.gen_output_raw(
            id=problem_id, seed=seed, commands='', move_score=0, power_score=0,
            tag_prefix='play_icfp2015 (error) ')


def main():
    start_time = time.time()
    logging.basicConfig(level=logging.DEBUG)
    args = parser.parse_args()

    logging.info('Cmdline: %s', sys.argv)

    problems = [load_problems(f) for f in args.f]
    problem_instances = list(itertools.chain.from_iterable(problems))
    power_phrases = [p for p in args.p]
    max_runtime = args.t
    max_memory = args.m
    max_cores = args.c

    if max_cores == NO_LIMIT:
        cores = multiprocessing.cpu_count()
    else:
        cores = min(max_cores, multiprocessing.cpu_count())

    logging.info(
        'Loaded %d problems (%d instances) and %d power phrases',
        len(problems), len(problem_instances), len(power_phrases))
    logging.info('Power phrases: %r', power_phrases)
    logging.info(
        'Time limit: %s, memory limit: %s, cores: %d '
        '(%s, %d available)',
        prettify_limit(max_runtime, '%ds'),
        prettify_limit(max_memory, '%dMB'),
        cores, prettify_limit(max_cores, '%d'),
        multiprocessing.cpu_count())

    pool = multiprocessing.Pool(cores)
    solutions = pool.map(
        functools.partial(safe_solve, power_phrases),
        problem_instances)

    scores = []
    total_score = 0
    for solution in solutions:
        score = utils.score_of_solution(solution)
        scores.append((
            solution['problemId'], solution['seed'],
            score))
        total_score += score

    logging.info('Total score: %d', total_score)
    logging.info('Totoal runtime: %ds', time.time() - start_time)

    for score in sorted(scores):
        logging.info('Problem: %-8d     Seed: %-8d     Score: %d', *score)

    json.dump(solutions, sys.stdout)


if __name__ == '__main__':
      main()
